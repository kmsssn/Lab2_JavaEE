1.	Почему Spring MVC требует Tomcat, а WebFlux использует Netty?
Spring MVC работает с Tomcat, потому что этот сервер подходит для обычных приложений, где каждый запрос обрабатывается в отдельном потоке, и это работает в синхронном, блокирующем режиме. Это хорошо для приложений с небольшим количеством запросов.
WebFlux, наоборот, использует Netty, потому что Netty может работать с запросами без блокировки потока. Это позволяет обрабатывать много запросов одновременно и быстрее. Поэтому для WebFlux, где важна высокая производительность и работа с большим количеством запросов, мы используем Netty.

2.	Какие задачи лучше решать с помощью Spring WebFlux?
Spring WebFlux идеально подходит для приложений, где нужно обрабатывать много запросов одновременно, например:
Для быстрых API, которые должны работать с большим количеством данных.
Для микросервисов, которые обрабатывают много запросов с минимальными задержками.
Для приложений, которые требуют реального времени (например, чаты, игры, уведомления).

3.	Что происходит, если увеличить количество запросов?
В Spring MVC каждый запрос блокирует поток, и если их слишком много, то потоки заканчиваются, и сервер начинает работать медленно или вообще не может обработать все запросы.
В WebFlux запросы обрабатываются асинхронно, что позволяет не блокировать потоки. Сервер может обрабатывать большое количество запросов одновременно, что помогает избежать перегрузки.

4.	Почему WebFlux показывает меньшую задержку при высокой нагрузке?
WebFlux показывает меньшую задержку, потому что он не блокирует потоки. Он использует асинхронную обработку, что позволяет обрабатывать множество запросов, не ожидая завершения каждого. Таким образом, когда нагрузка высока, WebFlux справляется лучше, так как потоки не тратятся на ожидание, а работают с несколькими запросами одновременно.
